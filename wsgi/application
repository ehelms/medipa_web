#!/usr/bin/python
import os
import sys
import shutil
import subprocess
import signal

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../lib/')
sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')

BASE_DIR = os.path.dirname(os.path.abspath(__file__)) + '/../'

if os.path.isdir(os.path.abspath(__file__).split('/application')[0] + "/static/javascript"):
    shutil.rmtree(os.path.abspath(__file__).split('/application')[0] + "/static/javascript", ignore_errors=True)
shutil.copytree(os.path.abspath(__file__).split('/application')[0] +  "/../medipa/static/javascript", os.path.abspath(__file__).split('/application')[0] + "/static/javascript") 

if os.path.isdir(os.path.abspath(__file__).split('/application')[0] + "/static/stylesheets"):
    shutil.rmtree(os.path.abspath(__file__).split('/application')[0] + "/static/stylesheets", ignore_errors=True)
shutil.copytree(os.path.abspath(__file__).split('/application')[0] +  "/../medipa/static/stylesheets", os.path.abspath(__file__).split('/application')[0] + "/static/stylesheets") 


virtenv = os.environ['APPDIR'] + '/virtenv/'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python2.6/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')

try:
    execfile(virtualenv, dict(__file__=virtualenv))
except IOError:
    pass
#
# IMPORTANT: Put any additional includes below this line.  If placed above this
# line, it's possible required libraries won't be in your searchable path
# 

processname = 'celeryd'
for line in os.popen("ps xa"):
    fields = line.split()
    pid = fields[0]
    stat = fields[2]
    process = fields[4]
    
    if stat == "Sl":
        
        try:
            line.index(processname)
            # Kill the Process. Change signal.SIGHUP to signal.SIGKILL if you like
            os.kill(int(pid), signal.SIGKILL)
            break
        except ValueError:
            pass

subprocess.Popen(["python", os.environ['APPDIR'] + "/repo/medipa/" + "celery_manager.py", "celeryd"], env=os.environ).pid

from medipa.views import app as application

#
# Below for testing only
#
if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    httpd = make_server('localhost', 8051, application)
    # Wait for a single request, serve it and quit.
    httpd.handle_request()
